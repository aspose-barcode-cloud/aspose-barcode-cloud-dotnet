// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="ITFParams.cs">
//   Copyright (c) 2021 Aspose.BarCode for Cloud
// </copyright>
// <summary>
//   Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

//
// This source code was auto-generated by AsposeBarcodeCloudCodegen.
//

using System;
using System.Collections.Generic;
using System.Text;

namespace Aspose.BarCode.Cloud.Sdk.Model
{

    /// <summary>
    ///     ITF parameters.
    /// </summary>
    public class ITFParams
    {
        /// <summary>
        ///     Border type of ITF barcode. Default value: ITF14BorderType.Bar.
        /// </summary>
        public ITF14BorderType? BorderType { get; set; }

        /// <summary>
        ///     ITF border (bearer bar) thickness in Unit value. Default value: 12pt.
        /// </summary>
        public double? BorderThickness { get; set; }

        /// <summary>
        ///     Size of the quiet zones in xDimension. Default value: 10, meaning if xDimension = 2px than quiet zones will be 20px.
        /// </summary>
        public int? QuietZoneCoef { get; set; }

        /// <summary>
        ///     Get the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ITFParams {\n");
            sb.Append("  BorderThickness: ").Append(BorderThickness).Append("\n");
            sb.Append("  BorderType: ").Append(BorderType).Append("\n");
            sb.Append("  QuietZoneCoef: ").Append(QuietZoneCoef).Append("\n");
            sb.Append("}\n");

            return sb.ToString();
        }
    }
}
