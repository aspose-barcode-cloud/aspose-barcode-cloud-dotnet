using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Aspose.BarCode.Cloud.Sdk.Api;
using Aspose.BarCode.Cloud.Sdk.Interfaces;
using Aspose.BarCode.Cloud.Sdk.Model;
using Aspose.BarCode.Cloud.Sdk.Model.Requests;
using NUnit.Framework;

namespace Aspose.BarCode.Cloud.Sdk.Tests
{
    /// <summary>
    ///     Class for testing BarcodeApi
    /// </summary>
    /// <remarks>
    ///     This file is automatically generated by Swagger Codegen.
    ///     Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BarcodeApiTests : TestsBase
    {
        /// <summary>
        ///     Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            _api = new BarcodeApi(TestConfiguration);
            _fileApi = new FileApi(TestConfiguration);
        }

        /// <summary>
        ///     Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        private IBarcodeApi _api;
        private IFileApi _fileApi;

        private async Task<string> PutTestFileAsync(string fileName)
        {
            using FileStream fileToUpload = File.Open(TestFilePath(fileName), FileMode.Open, FileAccess.Read);
            FilesUploadResult uploaded = await _fileApi.UploadFileAsync(
                new UploadFileRequest(
                    $"{TempFolderPath}/{fileName}",
                    fileToUpload
                )
            );
            Assert.IsNotEmpty(uploaded.Uploaded);

            return TempFolderPath;
        }


        /// <summary>
        ///     Test an instance of BarcodeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf(typeof(IBarcodeApi), _api, "instance is a IBarcodeApi");
        }

        /// <summary>
        ///     Test GetBarcodeGenerateAsync
        /// </summary>
        [Test]
        [Category("AsyncTests")]
        public async Task GetBarcodeGenerateAsyncTest()
        {
            // Arrange
            var request = new GetBarcodeGenerateRequest(
                text: "Very sample text",
                type: EncodeBarcodeType.Code128.ToString()
            )
            {
                format = "png"
            };

            // Act
            using Stream response = await _api.GetBarcodeGenerateAsync(request);
            // Assert
            Assert.IsTrue(response.Length > 0);
            using FileStream savedFileStream = File.Create(TestFilePath("Test_GetBarcodeGenerate.png"));
            await response.CopyToAsync(savedFileStream);
        }


        /// <summary>
        ///     Test GetBarcodeRecognizeAsync
        /// </summary>
        [Test]
        [Category("AsyncTests")]
        public async Task GetBarcodeRecognizeAsyncTest()
        {
            // Arrange
            const string fileName = "Test_PostGenerateMultiple.png";

            var expectedBarcodes = new List<GeneratorParams>
            {
                new GeneratorParams
                {
                    TypeOfBarcode = EncodeBarcodeType.QR,
                    Text = "Hello world!"
                },
                new GeneratorParams
                {
                    TypeOfBarcode = EncodeBarcodeType.Code128,
                    Text = "Hello world!"
                }
            };

            string folder = await PutTestFileAsync(fileName);

            // Act
            BarcodeResponseList response = await _api.GetBarcodeRecognizeAsync(
                new GetBarcodeRecognizeRequest(
                    fileName
                )
                {
                    folder = folder,
                    Preset = PresetType.HighPerformance.ToString(),
                    Types = new List<DecodeBarcodeType> { DecodeBarcodeType.QR, DecodeBarcodeType.Code128 }
                }
            );

            // Assert
            Assert.AreEqual(expectedBarcodes.Count, response.Barcodes.Count);

            foreach ((GeneratorParams generated, BarcodeResponse recognized) in
                     expectedBarcodes.Zip(response.Barcodes,
                         (generated, recognized) => (generated, recognized)))
            {
                Assert.AreEqual(generated.TypeOfBarcode.ToString(), recognized.Type);
                Assert.AreEqual(generated.Text, recognized.BarcodeValue);
            }
        }


        /// <summary>
        ///     Test PostBarcodeRecognizeFromUrlOrContentAsync
        /// </summary>
        [Test]
        [Category("AsyncTests")]
        public async Task PostBarcodeRecognizeFromUrlOrContentAsyncTest()
        {
            // Arrange
            using Stream image = GetTestImage("1.png");

            // Act
            BarcodeResponseList response = await _api.PostBarcodeRecognizeFromUrlOrContentAsync(
                new PostBarcodeRecognizeFromUrlOrContentRequest(image)
                {
                    ChecksumValidation = ChecksumValidation.Off.ToString(),
                    Preset = PresetType.HighPerformance.ToString(),
                    Types = new List<DecodeBarcodeType> { DecodeBarcodeType.Code11 }
                }
            );

            // Assert
            Assert.AreEqual(1, response.Barcodes.Count);
            Assert.IsFalse(string.IsNullOrWhiteSpace(response.Barcodes[0].ToString()),
                message: $"Empty BarcodeResponse.ToString()");
            Assert.AreEqual(DecodeBarcodeType.Code11.ToString(), response.Barcodes[0].Type);
            Assert.AreEqual("1234567812", response.Barcodes[0].BarcodeValue);
        }


        /// <summary>
        ///     Test PostGenerateMultipleAsync
        /// </summary>
        [Test]
        [Category("AsyncTests")]
        public async Task PostGenerateMultipleAsyncTest()
        {
            // Arrange
            var request = new PostGenerateMultipleRequest(
                new GeneratorParamsList
                {
                    BarcodeBuilders = new List<GeneratorParams>
                    {
                        new GeneratorParams
                        {
                            TypeOfBarcode = EncodeBarcodeType.QR,
                            Text = "Hello world!"
                        },
                        new GeneratorParams
                        {
                            TypeOfBarcode = EncodeBarcodeType.Code128,
                            Text = "Hello world!"
                        }
                    }
                }
            );

            // Act
            using Stream response = await _api.PostGenerateMultipleAsync(request);

            // Assert
            Assert.IsTrue(response.Length > 0);
            using FileStream savedFileStream = File.Create(TestFilePath("Test_PostGenerateMultiple.png"));
            await response.CopyToAsync(savedFileStream);
        }


        /// <summary>
        ///     Test PutBarcodeGenerateFile
        /// </summary>
        [Test]
        [Category("AsyncTests")]
        public async Task PutBarcodeGenerateFileAsyncTest()
        {
            // Arrange
            var request = new PutBarcodeGenerateFileRequest(
                "Test_PutBarcodeGenerateFile.png",
                type: EncodeBarcodeType.Code128.ToString(),
                text: "Hello!"
            )
            {
                folder = TempFolderPath
            };

            // Act
            ResultImageInfo response = await _api.PutBarcodeGenerateFileAsync(request);

            // Assert
            Assert.True(response.FileSize > 0);
            Assert.True(response.ImageWidth > 0);
            Assert.True(response.ImageHeight > 0);
        }


        /// <summary>
        ///     Test PutBarcodeRecognizeFromBodyAsync
        /// </summary>
        [Test]
        [Category("AsyncTests")]
        public async Task PutBarcodeRecognizeFromBodyAsyncTest()
        {
            // Arrange
            var barcodesToRecognize = new List<GeneratorParams>
            {
                new GeneratorParams
                {
                    TypeOfBarcode = EncodeBarcodeType.Code128,
                    Text = "Very sample text"
                }
            };

            const string fileName = "Test_GetBarcodeGenerate.png";
            string folder = await PutTestFileAsync(fileName);

            // Act
            BarcodeResponseList response = await _api.PutBarcodeRecognizeFromBodyAsync(
                new PutBarcodeRecognizeFromBodyRequest(
                    fileName,
                    readerParams: new ReaderParams
                    {
                        Preset = PresetType.HighPerformance,
                        Types = new List<DecodeBarcodeType> { DecodeBarcodeType.Code128 }
                    }
                )
                {
                    folder = folder
                }
            );

            // Assert
            Assert.AreEqual(barcodesToRecognize.Count, response.Barcodes.Count);

            foreach ((GeneratorParams generated, BarcodeResponse recognized) in
                     barcodesToRecognize.Zip(response.Barcodes,
                         (generated, recognized) => (generated, recognized)))
            {
                Assert.AreEqual(generated.TypeOfBarcode.ToString(), recognized.Type);
                Assert.AreEqual(generated.Text, recognized.BarcodeValue);
            }
        }


        /// <summary>
        ///     Test PutGenerateMultipleAsync
        /// </summary>
        [Test]
        [Category("AsyncTests")]
        public async Task PutGenerateMultipleAsyncTest()
        {
            // Arrange
            var generatorParamsList = new GeneratorParamsList
            {
                BarcodeBuilders = new List<GeneratorParams>
                {
                    new GeneratorParams
                    {
                        TypeOfBarcode = EncodeBarcodeType.Code128,
                        Text = "Hello world!"
                    }
                }
            };

            var request = new PutGenerateMultipleRequest(
                "Test_PutGenerateMultiple.png",
                generatorParamsList
            )
            {
                folder = TempFolderPath
            };

            // Act
            ResultImageInfo response = await _api.PutGenerateMultipleAsync(request);

            // Assert
            Assert.True(response.FileSize > 0);
            Assert.True(response.ImageWidth > 0);
            Assert.True(response.ImageHeight > 0);
        }
    }
}
