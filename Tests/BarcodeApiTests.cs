// --------------------------------------------------------------------------------------------------------------------
// <copyright company="Aspose" file="BarcodeApi.cs">
//   Copyright (c) 2020 Aspose.BarCode for Cloud
// </copyright>
// <summary>
//   Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using System.Collections.Generic;
using System.IO;
using System.Linq;
using Aspose.BarCode.Cloud.Sdk.Api;
using Aspose.BarCode.Cloud.Sdk.Interfaces;
using Aspose.BarCode.Cloud.Sdk.Model;
using Aspose.BarCode.Cloud.Sdk.Model.Requests;
using Newtonsoft.Json;
using NUnit.Framework;

namespace Tests
{
    /// <summary>
    ///     Class for testing BarcodeApi
    /// </summary>
    /// <remarks>
    ///     This file is automatically generated by Swagger Codegen.
    ///     Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BarcodeApiTests : TestsBase
    {
        /// <summary>
        ///     Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            Configuration config;
            using (StreamReader file = File.OpenText(Path.Combine("..", "..", "..", "Configuration.json")))
            {
                var serializer = new JsonSerializer();
                config = (Configuration) serializer.Deserialize(file, typeof(Configuration));
            }

            _api = new BarcodeApi(config);
        }

        /// <summary>
        ///     Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        private IBarcodeApi _api;

        private static string PutTestFile(IBarcodeApi api, string fileName, List<GeneratorParams> barcodes)
        {
            var generatorParamsList = new GeneratorParamsList
            {
                BarcodeBuilders = barcodes
            };

            var folder = TempFolderPath;
            var request = new PutGenerateMultipleRequest(
                fileName,
                generatorParamsList,
                folder: folder
            );

            ResultImageInfo response = api.PutGenerateMultiple(request);
            Assert.IsTrue(response.FileSize > 0);

            return folder;
        }


        /// <summary>
        ///     Test GetBarcodeGenerate
        /// </summary>
        [Test]
        public void GetBarcodeGenerateTest()
        {
            // Arrange
            var request = new GetBarcodeGenerateRequest(
                text: "Very sample text",
                type: EncodeBarcodeType.Code128.ToString(),
                format: "png"
            );

            // Act
            using (Stream response = _api.GetBarcodeGenerate(request))
            {
                // Assert
                Assert.IsTrue(response.Length > 0);
                using (FileStream stream = File.Create(TestFilePath("Test_GetBarcodeGenerate.png")))
                {
                    response.CopyTo(stream);
                }
            }
        }

        /// <summary>
        ///     Test GetBarcodeRecognize
        /// </summary>
        [Test]
        public void GetBarcodeRecognizeTest()
        {
            // Arrange
            var barcodesToRecognize = new List<GeneratorParams>
            {
                new GeneratorParams
                {
                    TypeOfBarcode = EncodeBarcodeType.QR,
                    Text = "Hello world!"
                },
                new GeneratorParams
                {
                    TypeOfBarcode = EncodeBarcodeType.Code128,
                    Text = "Hello world!"
                }
            };

            const string fileName = "Test_GetBarcodeRecognize.png";
            var folder = PutTestFile(_api, fileName, barcodesToRecognize);
            var request = new GetBarcodeRecognizeRequest(
                fileName,
                folder: folder,
                preset: PresetType.HighPerformance.ToString()
            );

            // Act
            BarcodeResponseList response = _api.GetBarcodeRecognize(request);

            // Assert
            Assert.AreEqual(barcodesToRecognize.Count, response.Barcodes.Count);

            foreach ((GeneratorParams generated, BarcodeResponse recognized) in
                barcodesToRecognize.Zip(response.Barcodes,
                    (generated, recognized) => (generated, recognized)))
            {
                Assert.AreEqual(generated.TypeOfBarcode.ToString(), recognized.Type);
                Assert.AreEqual(generated.Text, recognized.BarcodeValue);
            }
        }

        /// <summary>
        ///     Test an instance of BarcodeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf(typeof(IBarcodeApi), _api, "instance is a IBarcodeApi");
        }

        /// <summary>
        ///     Test PostBarcodeRecognizeFromUrlOrContent
        /// </summary>
        [Test]
        public void PostBarcodeRecognizeFromUrlOrContentTest()
        {
            // Arrange
            BarcodeResponseList response;
            using (Stream image = GetTestImage("1.png"))
            {
                var request = new PostBarcodeRecognizeFromUrlOrContentRequest(
                    image: image,
                    checksumValidation: ChecksumValidation.Off.ToString(),
                    preset: PresetType.HighPerformance.ToString()
                );

                // Act
                response = _api.PostBarcodeRecognizeFromUrlOrContent(request);
            }

            // Assert
            Assert.AreEqual(1, response.Barcodes.Count);
            Assert.AreEqual(DecodeBarcodeType.Code11.ToString(), response.Barcodes[0].Type);
            Assert.AreEqual("1234567812", response.Barcodes[0].BarcodeValue);
        }

        /// <summary>
        ///     Test PostGenerateMultiple
        /// </summary>
        [Test]
        public void PostGenerateMultipleTest()
        {
            // Arrange
            var request = new PostGenerateMultipleRequest(
                new GeneratorParamsList
                {
                    BarcodeBuilders = new List<GeneratorParams>
                    {
                        new GeneratorParams
                        {
                            TypeOfBarcode = EncodeBarcodeType.QR,
                            Text = "Hello world!"
                        },
                        new GeneratorParams
                        {
                            TypeOfBarcode = EncodeBarcodeType.Code128,
                            Text = "Hello world!"
                        }
                    }
                }
            );

            // Act
            using (Stream response = _api.PostGenerateMultiple(request))
            {
                // Assert

                Assert.IsTrue(response.Length > 0);
                using (FileStream stream = File.Create(TestFilePath("Test_PostGenerateMultiple.png")))
                {
                    response.CopyTo(stream);
                }
            }
        }

        /// <summary>
        ///     Test PutBarcodeGenerateFile
        /// </summary>
        [Test]
        public void PutBarcodeGenerateFileTest()
        {
            // Arrange
            var request = new PutBarcodeGenerateFileRequest(
                "Test_PutBarcodeGenerateFile.png",
                EncodeBarcodeType.Code128.ToString(),
                "Hello!",
                folder: TempFolderPath
            );

            // Act
            ResultImageInfo response = _api.PutBarcodeGenerateFile(request);

            // Assert
            Assert.True(response.FileSize > 0);
            Assert.True(response.ImageWidth > 0);
            Assert.True(response.ImageHeight > 0);
        }

        /// <summary>
        ///     Test PutBarcodeRecognizeFromBody
        /// </summary>
        [Test]
        public void PutBarcodeRecognizeFromBodyTest()
        {
            // Arrange
            var barcodesToRecognize = new List<GeneratorParams>
            {
                new GeneratorParams
                {
                    TypeOfBarcode = EncodeBarcodeType.QR,
                    Text = "PutBarcodeRecognizeFromBody QR"
                },
                new GeneratorParams
                {
                    TypeOfBarcode = EncodeBarcodeType.Code128,
                    Text = "PutBarcodeRecognizeFromBody Code128"
                }
            };

            const string fileName = "Test_PutBarcodeRecognizeFromBody.png";
            var folder = PutTestFile(_api, fileName, barcodesToRecognize);

            var request = new PutBarcodeRecognizeFromBodyRequest(
                fileName,
                new ReaderParams
                {
                    Preset = PresetType.HighPerformance
                },
                folder: folder
            );

            // Act
            BarcodeResponseList response = _api.PutBarcodeRecognizeFromBody(request);

            // Assert
            Assert.AreEqual(barcodesToRecognize.Count, response.Barcodes.Count);

            foreach ((GeneratorParams generated, BarcodeResponse recognized) in
                barcodesToRecognize.Zip(response.Barcodes,
                    (generated, recognized) => (generated, recognized)))
            {
                Assert.AreEqual(generated.TypeOfBarcode.ToString(), recognized.Type);
                Assert.AreEqual(generated.Text, recognized.BarcodeValue);
            }
        }

        /// <summary>
        ///     Test PutGenerateMultiple
        /// </summary>
        [Test]
        public void PutGenerateMultipleTest()
        {
            // Arrange
            var generatorParamsList = new GeneratorParamsList
            {
                BarcodeBuilders = new List<GeneratorParams>
                {
                    new GeneratorParams
                    {
                        TypeOfBarcode = EncodeBarcodeType.Code128,
                        Text = "Hello world!"
                    }
                }
            };

            var request = new PutGenerateMultipleRequest(
                "Test_PutGenerateMultiple.png",
                generatorParamsList,
                folder: TempFolderPath
            );

            // Act
            ResultImageInfo response = _api.PutGenerateMultiple(request);

            // Assert
            Assert.True(response.FileSize > 0);
            Assert.True(response.ImageWidth > 0);
            Assert.True(response.ImageHeight > 0);
        }
    }
}
