/* 
 * Aspose.Barcode Cloud API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Aspose.BarCode.Cloud.Sdk.Api;
using Aspose.BarCode.Cloud.Sdk.Internal;
using Aspose.BarCode.Cloud.Sdk.Model;
using Aspose.BarCode.Cloud.Sdk.Model.Requests;
using Newtonsoft.Json;
using NUnit.Framework;
using System.IO;

namespace Aspose.BarCode.Cloud.Sdk.Test
{
    /// <summary>
    ///  Class for testing BarcodeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BarcodeApiTests
    {
        private BarcodeApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {

            Configuration config;
            using (StreamReader file = File.OpenText(Path.Combine("..", "..", "..", "Configuration.json")))
            {
                JsonSerializer serializer = new JsonSerializer();
                config = (Configuration)serializer.Deserialize(file, typeof(Configuration));
            }

            instance = new BarcodeApi(config);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BarcodeApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BarcodeApi
            //Assert.IsInstanceOfType(typeof(BarcodeApi), instance, "instance is a BarcodeApi");
        }


        /// <summary>
        /// Test GetBarcodeGenerate
        /// </summary>
        [Test]
        public void GetBarcodeGenerateTest()
        {
            // Arrange
            var request = new GetBarcodeGenerateRequest(
                text: "Very sample text",
                type: EncodeBarcodeType.Code128.ToString(),
                format: "png"
            );

            // Act
            using (Stream response = instance.GetBarcodeGenerate(request))
            {
                // Assert
                Assert.IsTrue(response.Length > 0);
                using (FileStream stream = File.Create("Test_GetBarcodeGenerate.png"))
                {
                    response.CopyTo(stream);
                }
            }
        }

        /// <summary>
        /// Test GetBarcodeRecognize
        /// </summary>
        [Test]
        public void GetBarcodeRecognizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string type = null;
            //string checksumValidation = null;
            //bool? detectEncoding = null;
            //string preset = null;
            //int? rectX = null;
            //int? rectY = null;
            //int? rectWidth = null;
            //int? rectHeight = null;
            //bool? stripFNC = null;
            //int? timeout = null;
            //int? medianSmoothingWindowSize = null;
            //bool? allowMedianSmoothing = null;
            //bool? allowComplexBackground = null;
            //bool? allowDatamatrixIndustrialBarcodes = null;
            //bool? allowDecreasedImage = null;
            //bool? allowDetectScanGap = null;
            //bool? allowIncorrectBarcodes = null;
            //bool? allowInvertImage = null;
            //bool? allowMicroWhiteSpotsRemoving = null;
            //bool? allowOneDFastBarcodesDetector = null;
            //bool? allowOneDWipedBarsRestoration = null;
            //bool? allowQRMicroQrRestoration = null;
            //bool? allowRegularImage = null;
            //bool? allowSaltAndPepperFiltering = null;
            //bool? allowWhiteSpotsRemoving = null;
            //double? regionLikelihoodThresholdPercent = null;
            //List<int?> scanWindowSizes = null;
            //double? similarity = null;
            //bool? skipDiagonalSearch = null;
            //string australianPostEncodingTable = null;
            //string rectangleRegion = null;
            //string storage = null;
            //string folder = null;
            //var response = instance.GetBarcodeRecognize(name, type, checksumValidation, detectEncoding, preset, rectX, rectY, rectWidth, rectHeight, stripFNC, timeout, medianSmoothingWindowSize, allowMedianSmoothing, allowComplexBackground, allowDatamatrixIndustrialBarcodes, allowDecreasedImage, allowDetectScanGap, allowIncorrectBarcodes, allowInvertImage, allowMicroWhiteSpotsRemoving, allowOneDFastBarcodesDetector, allowOneDWipedBarsRestoration, allowQRMicroQrRestoration, allowRegularImage, allowSaltAndPepperFiltering, allowWhiteSpotsRemoving, regionLikelihoodThresholdPercent, scanWindowSizes, similarity, skipDiagonalSearch, australianPostEncodingTable, rectangleRegion, storage, folder);
            //Assert.IsInstanceOf<BarcodeResponseList> (response, "response is BarcodeResponseList");
        }

        /// <summary>
        /// Test PostBarcodeRecognizeFromUrlOrContent
        /// </summary>
        [Test]
        public void PostBarcodeRecognizeFromUrlOrContentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string checksumValidation = null;
            //bool? detectEncoding = null;
            //string preset = null;
            //int? rectX = null;
            //int? rectY = null;
            //int? rectWidth = null;
            //int? rectHeight = null;
            //bool? stripFNC = null;
            //int? timeout = null;
            //int? medianSmoothingWindowSize = null;
            //bool? allowMedianSmoothing = null;
            //bool? allowComplexBackground = null;
            //bool? allowDatamatrixIndustrialBarcodes = null;
            //bool? allowDecreasedImage = null;
            //bool? allowDetectScanGap = null;
            //bool? allowIncorrectBarcodes = null;
            //bool? allowInvertImage = null;
            //bool? allowMicroWhiteSpotsRemoving = null;
            //bool? allowOneDFastBarcodesDetector = null;
            //bool? allowOneDWipedBarsRestoration = null;
            //bool? allowQRMicroQrRestoration = null;
            //bool? allowRegularImage = null;
            //bool? allowSaltAndPepperFiltering = null;
            //bool? allowWhiteSpotsRemoving = null;
            //double? regionLikelihoodThresholdPercent = null;
            //List<int?> scanWindowSizes = null;
            //double? similarity = null;
            //bool? skipDiagonalSearch = null;
            //string australianPostEncodingTable = null;
            //string rectangleRegion = null;
            //string url = null;
            //System.IO.Stream image = null;
            //var response = instance.PostBarcodeRecognizeFromUrlOrContent(type, checksumValidation, detectEncoding, preset, rectX, rectY, rectWidth, rectHeight, stripFNC, timeout, medianSmoothingWindowSize, allowMedianSmoothing, allowComplexBackground, allowDatamatrixIndustrialBarcodes, allowDecreasedImage, allowDetectScanGap, allowIncorrectBarcodes, allowInvertImage, allowMicroWhiteSpotsRemoving, allowOneDFastBarcodesDetector, allowOneDWipedBarsRestoration, allowQRMicroQrRestoration, allowRegularImage, allowSaltAndPepperFiltering, allowWhiteSpotsRemoving, regionLikelihoodThresholdPercent, scanWindowSizes, similarity, skipDiagonalSearch, australianPostEncodingTable, rectangleRegion, url, image);
            //Assert.IsInstanceOf<BarcodeResponseList> (response, "response is BarcodeResponseList");
        }

        /// <summary>
        /// Test PostGenerateMultiple
        /// </summary>
        [Test]
        public void PostGenerateMultipleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GeneratorParamsList generatorParamsList = null;
            //string format = null;
            //var response = instance.PostGenerateMultiple(generatorParamsList, format);
            //Assert.IsInstanceOf<System.IO.Stream> (response, "response is System.IO.Stream");
        }

        /// <summary>
        /// Test PutBarcodeGenerateFile
        /// </summary>
        [Test]
        public void PutBarcodeGenerateFileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string type = null;
            //string text = null;
            //string twoDDisplayText = null;
            //string textLocation = null;
            //string textAlignment = null;
            //string textColor = null;
            //string fontSizeMode = null;
            //double? resolution = null;
            //double? xDimension = null;
            //double? textSpace = null;
            //string units = null;
            //string sizeMode = null;
            //double? barHeight = null;
            //double? imageHeight = null;
            //double? imageWidth = null;
            //double? rotationAngle = null;
            //string backColor = null;
            //string barColor = null;
            //string borderColor = null;
            //double? borderWidth = null;
            //string borderDashStyle = null;
            //bool? borderVisible = null;
            //string enableChecksum = null;
            //bool? enableEscape = null;
            //bool? filledBars = null;
            //bool? alwaysShowChecksum = null;
            //double? wideNarrowRatio = null;
            //bool? validateText = null;
            //string supplementData = null;
            //double? supplementSpace = null;
            //string storage = null;
            //string folder = null;
            //string format = null;
            //var response = instance.PutBarcodeGenerateFile(name, type, text, twoDDisplayText, textLocation, textAlignment, textColor, fontSizeMode, resolution, xDimension, textSpace, units, sizeMode, barHeight, imageHeight, imageWidth, rotationAngle, backColor, barColor, borderColor, borderWidth, borderDashStyle, borderVisible, enableChecksum, enableEscape, filledBars, alwaysShowChecksum, wideNarrowRatio, validateText, supplementData, supplementSpace, storage, folder, format);
            //Assert.IsInstanceOf<ResultImageInfo> (response, "response is ResultImageInfo");
        }

        /// <summary>
        /// Test PutBarcodeRecognizeFromBody
        /// </summary>
        [Test]
        public void PutBarcodeRecognizeFromBodyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //ReaderParams readerParams = null;
            //string type = null;
            //string storage = null;
            //string folder = null;
            //var response = instance.PutBarcodeRecognizeFromBody(name, readerParams, type, storage, folder);
            //Assert.IsInstanceOf<BarcodeResponseList> (response, "response is BarcodeResponseList");
        }

        /// <summary>
        /// Test PutGenerateMultiple
        /// </summary>
        [Test]
        public void PutGenerateMultipleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //GeneratorParamsList generatorParamsList = null;
            //string format = null;
            //string folder = null;
            //string storage = null;
            //var response = instance.PutGenerateMultiple(name, generatorParamsList, format, folder, storage);
            //Assert.IsInstanceOf<ResultImageInfo> (response, "response is ResultImageInfo");
        }

    }

}
